1534704060830:(. js/window (hello))
1534704081965:(. js/window (minesweeper))
1534704108947:(. js/window (solved-square 3 3))
1534704163011:(js/alert "Hello")
1534704673348:(let [[x y] [5 3]\n             my-point [x y]\n      )
1534704690081:(let [[x y :as my-point] [5 3]]\n         (println x y)\n         (println my-point))
1534713475131:(solved-square 3 3)
1534713637113:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))
1534713650599:(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))
1534713655308:(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (throw (js/Error. "Error thrown..."))\n    (catch js/Error e false)\n    (finally))) ;; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES
1534713667906:(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID
1534713676598:(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))
1534713681689:(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID
1534713690730:(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (throw (js/Error. "Error thrown..."))\n    (catch js/Error e false)\n    (finally))) ;; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES
1534713698982:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))
1534713713180:(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))
1534713743505:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))
1534713747709:(solved-square 3 3)
1534713749645:@grid
1534713817491:(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)))
1534713863477:(solved-square 3 3)
1534713869754:@grid
1534714225177:(prn (solved-square 3 3))
1534714243360:(solved-square 3 3)
1534714257422:@grid
1534714267106:(ns ^:figwheel-always minesweeper-web-cljs.core\n    (:require [rum.core :as rum]))\n\n(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n       \n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e]\n                  (prn (solved-square i j))\n                  )}])]])\n\n(defn display-mine [])\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534714278317:@grid
1534714291225:(prn (solved-square 3 3))
1534714306472:(prn (solved-square 0 0)\n     )
1534714324895:(prn (solved-square 2 2))
1534714350929:(solved-square 2 2)
1534714372464:(solved-square 3 3)
1534714387265:(solved-square 2 1)
1534714393406:(solved-square 0 1)
1534714398357:(solved-square 4 4)
1534714418993:(ns ^:figwheel-always minesweeper-web-cljs.core\n    (:require [rum.core :as rum]))\n\n(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n       \n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e]\n                  ;;(prn (solved-square i j))\n                  )}])]])\n\n(defn display-mine [])\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534714424677:(solved-square 3 3)
1534714477433:(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n       \n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e]\n                  ;;(prn (solved-square i j))\n                  )}])]])\n\n(defn display-mine [])\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534714496650:(ns ^:figwheel-always minesweeper-web-cljs.core\n    (:require [rum.core :as rum]))\n\n(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n       \n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e]\n                  ;;(prn (solved-square i j))\n                  )}])]])\n\n\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534714500518:(print-grid 3 3)
1534714530203:(solved-square 3 3)
1534714534173:(solved-square 2 2)
1534714538797:(solved-square 1 1)
1534714563684:(ns ^:figwheel-always minesweeper-web-cljs.core\n    (:require [rum.core :as rum]))\n\n(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n       \n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e]\n                  (prn "It has been pressed")\n                  (js/alert str (solved-square i j))\n                  )}])]])\n\n(defn display-mine [])\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534714570180:@grid
1534714574789:(solved-square 3 3)
1534714594868:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))
1534714653410:(solved-square 3 3)
1534714662329:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))
1534714666404:(solved-square 3 3)
1534714864246:@grid
1534714877119:def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4)))))))
1534714884947:(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4)))))))
1534714891081:(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))
1534714899314:(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4)))))))
1534714911894:(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))
1534714920071:(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES
1534714936097:(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))
1534715041142:(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch js/Error e false)\n    (finally)))
1534715045930:(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))
1534715050860:@grid
1534715065916:(solved-square 3 3)
1534715072866:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))
1534715076789:(solved-square 3 3)
1534715079802:@grid
1534715088221:(solved-square 1 1)
1534715127953:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n      (count (filter identity (map #(get-mine (first (get-combos % i j)) (second(get-combos % i j))) foo)))))
1534715132580:(solved-square 1 1)
1534715139889:@grid
1534715149570:(permutations [-1 -1 0 0 1 1])
1534715191570:(:require [rum.core :as rum])
1534715219492:(defn get-mine [i j] (nth (nth @grid i) j))
1534715227801:(solved-square 3 3)
1534715232943:(solved-square 1 1)
1534715282486:(ns ^:figwheel-always minesweeper-web-cljs.core\n    (:require [rum.core :as rum]))\n\n(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch js/Error e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n    (count (filter identity (map #(get-mine (first (get-combos % i j)) (second (get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e])}])]])\n\n(defn display-mine [])\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534715287326:(solved-square 3 3)
1534715296422:(solved-square 1 1)
1534715302911:@grid
1534715318355:(solved-square 0 0)
1534715323283:(solved-square 1 1)
1534715331683:(ns ^:figwheel-always minesweeper-web-cljs.core\n    (:require [rum.core :as rum]))\n\n(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch js/Error e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n    (count (filter identity (map #(get-mine (first (get-combos % i j)) (second (get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e])}])]])\n\n(defn display-mine [])\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534715333714:@grid
1534715347017:(solved-grid 1 3)
1534715352524:(solved-square 1 3)
1534715356929:@grid
1534715370484:(solved-square 3 1)
1534715386562:(ns ^:figwheel-always minesweeper-web-cljs.core\n    (:require [rum.core :as rum]))\n\n(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))]\n    (count (filter identity (map #(get-mine (first (get-combos % i j)) (second (get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e])}])]])\n\n(defn display-mine [])\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534715388498:@grid
1534715394959:(solved-square 3 3)
1534715436088:(mapv vec (distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1]))))
1534715505072:(distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1])))
1534715517758:(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))
1534715526133:(distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1])))
1534715542998:(permutations [-1 -1 0 0 1 1])
1534715562196:(distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1])))
1534715565052:(permutations [-1 -1 0 0 1 1])
1534715590607:(distinct (map #(drop 4 %) (permutations [-1 -1 0 0 1 1])))
1534715632971:(distinct (map #(drop 1 %) (permutations [-1 -1 0 0 1 1])))
1534715642264:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 1 %) (permutations [-1 -1 0 0 1 1]))))]\n    (count (filter identity (map #(get-mine (first (get-combos % i j)) (second (get-combos % i j))) foo)))))
1534715647323:(solved-square 3 3)
1534715651052:(solved-square 1 1)
1534715654435:@grid
1534715665120:(ns minesweeper-web-cljs.core\n    (:require [rum.core :as rum]))\n\n(enable-console-print!)\n\n(println "Minesweeper Game...")\n\n(defn rand-bool [range] ;; RANDOM BOOLEAN AT A GIVEN PROBABILITY\n  (zero? (rand-int range)))\n\n(def grid (atom (mapv vec (partition 5 (take 25 (repeatedly #(rand-bool 4))))))) ;; CREATES A 5x5 GRID\n\n(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))\n\n(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)));; CATCHES INDEX OUT OF BOUNDS WHEN COUNTING FOR MINES\n  \n(defn get-combos [nums i j] (map + [i j] [(first nums) (second nums)]))\n\n(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 1 %) (permutations [-1 -1 0 0 1 1]))))]\n    (count (filter identity (map #(get-mine (first (get-combos % i j)) (second (get-combos % i j))) foo)))))\n\n(defn mine? [i j]\n  (if (= true (nth (nth @grid i) j))\n    (js/alert "You have hit a mine... You lose!!!")\n    (solved-square i j)))\n\n(defonce app-state \n  (atom {:text "This is Minesweeper!"\n         :grid @grid}))\n\n(rum/defc minesweeper []\n  [:center\n    [:h1 (:text @app-state)]\n    [:svg\n      {:view-box "0 0 5 5"\n      :width 500\n      :height 500}\n      (for [i (range (count (:grid @app-state)))\n            j (range (count (:grid @app-state)))]\n        ;;(prn str i j)\n        [:rect {:width 0.8\n                :height 0.8\n                :fill "grey"\n                :x i\n                :y j\n                :on-click\n                (fn upon-pressed [e])}])]])\n\n(defn display-mine [])\n          \n(rum/mount (minesweeper)\n  (. js/document (getElementById "app")))\n\n(defn on-js-reload [])
1534715677231:@grid
1534715683054:(solved-square 1 1)
1534715707627:(solved-square 3 1)
1534715719706:(solved-square 2 2)
1534715740299:(mapv vec (distinct (map #(drop 1 %) (permutations [-1 -1 0 0 1 1]))))
1534715810640:@grid
1534715824130:(map prn @grid)
1534715838872:(solved-square 2 2)
1534715870146:(distinct (map #(drop 1 %) (permutations [-1 -1 0 0 1 1])))
1534715896224:(map #(drop 1 %) (permutations [-1 -1 0 0 1 1]))
1534715974205:(distinct (map #(drop 1 %) (permutations [-1 -1 0 0 1 1])))
1534716015465:(permutations [1 2 3])
1534716032489:(permutations [1 2 3 4])
1534716064553:(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove '(x) nums)))))\n     [nums])))
1534716076399:(permutations [-1 -1 0 0 1 1])
1534716096977:(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove [x] nums)))))\n     [nums])))
1534716103199:(permutations [-1 -1 0 0 1 1])
1534716137863:(permutations [1 2 3])
1534716150445:(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove #{x} nums)))))\n     [nums])))
1534716165555:(permutations [1 2 3])
1534716183755:(permutations [1 1 2 3])
1534716269861:(def x #{1 2 3 1 2 3})
1534716312949:(sequence 1 1 2 2 3 3)
1534716385696:(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations (remove (seq x) nums)))))\n     [nums])))
1534716392776:(permutations [-1 -1 0 0 1 1])
1534716650263:(defn permutations [nums] ;; CREDIT : DIEGO BASCH STACK OVERFLOW\n  (lazy-seq\n   (if (seq (rest nums))\n     (apply concat (for [x nums]\n        (map #(cons x %) (permutations)))\n     [nums])))\n  )
1534716657859:(permutations [0 0 1 1 2 2])
1534717246186:(concat [1] [2])
1534717358244:(mapcat [1] [1 2 3])
1534717646685:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo (mapv vec (distinct (map #(drop 1 %) x))]\n    (count (filter identity (map #(get-mine (first (get-combos % i j)) (second (get-combos % i j))) foo)))))
1534717687202:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo x]\n    (count (filter identity (map #(get-mine (first (get-combos % i j)) (second (get-combos % i j))) foo)))))
1534717703147:(def x (vec [-1 -1][-1 0][-1 1][0 -1][0 1][1 -1][1 0][1 1]))
1534717711530:(defn solved-square [i j] ;; MUST UPDATE GRID VISUALLY\n  (let [foo x]\n    (count (filter identity (map #(get-mine (first (get-combos % i j)) (second (get-combos % i j))) foo)))))
1534717718905:@grid
1534717740472:(solved-square 1 1)
1534717772682:(def x [[-1 -1][-1 0][-1 1][0 -1][0 1][1 -1][1 0][1 1]])
1534717774793:(solved-square 1 1)
1534717778666:@grid
1534717793187:(solved-square 3 3)
1534717797258:(solved-square 0 0)
1534717810273:(defn get-mine [i j] ;; RETRIEVES BOOLEAN VALUE FROM A GIVEN SQUARE AT GIVEN INDEX\n  (try\n    (nth (nth @grid i) j)\n    (catch Exception e false)\n    (finally)))
1534717815307:(solved-square 0 0)
1534865197372:(js/alert "Hello World")
